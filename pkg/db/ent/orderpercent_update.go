// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/orderpercent"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPercentUpdate is the builder for updating OrderPercent entities.
type OrderPercentUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderPercentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderPercentUpdate builder.
func (opu *OrderPercentUpdate) Where(ps ...predicate.OrderPercent) *OrderPercentUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetCreatedAt sets the "created_at" field.
func (opu *OrderPercentUpdate) SetCreatedAt(u uint32) *OrderPercentUpdate {
	opu.mutation.ResetCreatedAt()
	opu.mutation.SetCreatedAt(u)
	return opu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableCreatedAt(u *uint32) *OrderPercentUpdate {
	if u != nil {
		opu.SetCreatedAt(*u)
	}
	return opu
}

// AddCreatedAt adds u to the "created_at" field.
func (opu *OrderPercentUpdate) AddCreatedAt(u int32) *OrderPercentUpdate {
	opu.mutation.AddCreatedAt(u)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrderPercentUpdate) SetUpdatedAt(u uint32) *OrderPercentUpdate {
	opu.mutation.ResetUpdatedAt()
	opu.mutation.SetUpdatedAt(u)
	return opu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opu *OrderPercentUpdate) AddUpdatedAt(u int32) *OrderPercentUpdate {
	opu.mutation.AddUpdatedAt(u)
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrderPercentUpdate) SetDeletedAt(u uint32) *OrderPercentUpdate {
	opu.mutation.ResetDeletedAt()
	opu.mutation.SetDeletedAt(u)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableDeletedAt(u *uint32) *OrderPercentUpdate {
	if u != nil {
		opu.SetDeletedAt(*u)
	}
	return opu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opu *OrderPercentUpdate) AddDeletedAt(u int32) *OrderPercentUpdate {
	opu.mutation.AddDeletedAt(u)
	return opu
}

// SetAppID sets the "app_id" field.
func (opu *OrderPercentUpdate) SetAppID(u uuid.UUID) *OrderPercentUpdate {
	opu.mutation.SetAppID(u)
	return opu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableAppID(u *uuid.UUID) *OrderPercentUpdate {
	if u != nil {
		opu.SetAppID(*u)
	}
	return opu
}

// ClearAppID clears the value of the "app_id" field.
func (opu *OrderPercentUpdate) ClearAppID() *OrderPercentUpdate {
	opu.mutation.ClearAppID()
	return opu
}

// SetUserID sets the "user_id" field.
func (opu *OrderPercentUpdate) SetUserID(u uuid.UUID) *OrderPercentUpdate {
	opu.mutation.SetUserID(u)
	return opu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableUserID(u *uuid.UUID) *OrderPercentUpdate {
	if u != nil {
		opu.SetUserID(*u)
	}
	return opu
}

// ClearUserID clears the value of the "user_id" field.
func (opu *OrderPercentUpdate) ClearUserID() *OrderPercentUpdate {
	opu.mutation.ClearUserID()
	return opu
}

// SetGoodID sets the "good_id" field.
func (opu *OrderPercentUpdate) SetGoodID(u uuid.UUID) *OrderPercentUpdate {
	opu.mutation.SetGoodID(u)
	return opu
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableGoodID(u *uuid.UUID) *OrderPercentUpdate {
	if u != nil {
		opu.SetGoodID(*u)
	}
	return opu
}

// ClearGoodID clears the value of the "good_id" field.
func (opu *OrderPercentUpdate) ClearGoodID() *OrderPercentUpdate {
	opu.mutation.ClearGoodID()
	return opu
}

// SetTitle sets the "title" field.
func (opu *OrderPercentUpdate) SetTitle(s string) *OrderPercentUpdate {
	opu.mutation.SetTitle(s)
	return opu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillableTitle(s *string) *OrderPercentUpdate {
	if s != nil {
		opu.SetTitle(*s)
	}
	return opu
}

// ClearTitle clears the value of the "title" field.
func (opu *OrderPercentUpdate) ClearTitle() *OrderPercentUpdate {
	opu.mutation.ClearTitle()
	return opu
}

// SetPercent sets the "percent" field.
func (opu *OrderPercentUpdate) SetPercent(d decimal.Decimal) *OrderPercentUpdate {
	opu.mutation.SetPercent(d)
	return opu
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (opu *OrderPercentUpdate) SetNillablePercent(d *decimal.Decimal) *OrderPercentUpdate {
	if d != nil {
		opu.SetPercent(*d)
	}
	return opu
}

// ClearPercent clears the value of the "percent" field.
func (opu *OrderPercentUpdate) ClearPercent() *OrderPercentUpdate {
	opu.mutation.ClearPercent()
	return opu
}

// SetStartAt sets the "start_at" field.
func (opu *OrderPercentUpdate) SetStartAt(u uint32) *OrderPercentUpdate {
	opu.mutation.ResetStartAt()
	opu.mutation.SetStartAt(u)
	return opu
}

// AddStartAt adds u to the "start_at" field.
func (opu *OrderPercentUpdate) AddStartAt(u int32) *OrderPercentUpdate {
	opu.mutation.AddStartAt(u)
	return opu
}

// SetEndAt sets the "end_at" field.
func (opu *OrderPercentUpdate) SetEndAt(u uint32) *OrderPercentUpdate {
	opu.mutation.ResetEndAt()
	opu.mutation.SetEndAt(u)
	return opu
}

// AddEndAt adds u to the "end_at" field.
func (opu *OrderPercentUpdate) AddEndAt(u int32) *OrderPercentUpdate {
	opu.mutation.AddEndAt(u)
	return opu
}

// SetBadgeLarge sets the "badge_large" field.
func (opu *OrderPercentUpdate) SetBadgeLarge(s string) *OrderPercentUpdate {
	opu.mutation.SetBadgeLarge(s)
	return opu
}

// SetBadgeSmall sets the "badge_small" field.
func (opu *OrderPercentUpdate) SetBadgeSmall(s string) *OrderPercentUpdate {
	opu.mutation.SetBadgeSmall(s)
	return opu
}

// Mutation returns the OrderPercentMutation object of the builder.
func (opu *OrderPercentUpdate) Mutation() *OrderPercentMutation {
	return opu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrderPercentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := opu.defaults(); err != nil {
		return 0, err
	}
	if len(opu.hooks) == 0 {
		affected, err = opu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opu.mutation = mutation
			affected, err = opu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opu.hooks) - 1; i >= 0; i-- {
			if opu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrderPercentUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrderPercentUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrderPercentUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrderPercentUpdate) defaults() error {
	if _, ok := opu.mutation.UpdatedAt(); !ok {
		if orderpercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpercent.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opu *OrderPercentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPercentUpdate {
	opu.modifiers = append(opu.modifiers, modifiers...)
	return opu
}

func (opu *OrderPercentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpercent.Table,
			Columns: orderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderpercent.FieldID,
			},
		},
	}
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldCreatedAt,
		})
	}
	if value, ok := opu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldCreatedAt,
		})
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldDeletedAt,
		})
	}
	if value, ok := opu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldDeletedAt,
		})
	}
	if value, ok := opu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldAppID,
		})
	}
	if opu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldAppID,
		})
	}
	if value, ok := opu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldUserID,
		})
	}
	if opu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldUserID,
		})
	}
	if value, ok := opu.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldGoodID,
		})
	}
	if opu.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldGoodID,
		})
	}
	if value, ok := opu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldTitle,
		})
	}
	if opu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpercent.FieldTitle,
		})
	}
	if value, ok := opu.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpercent.FieldPercent,
		})
	}
	if opu.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpercent.FieldPercent,
		})
	}
	if value, ok := opu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldStartAt,
		})
	}
	if value, ok := opu.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldStartAt,
		})
	}
	if value, ok := opu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldEndAt,
		})
	}
	if value, ok := opu.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldEndAt,
		})
	}
	if value, ok := opu.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeLarge,
		})
	}
	if value, ok := opu.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeSmall,
		})
	}
	_spec.Modifiers = opu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPercentUpdateOne is the builder for updating a single OrderPercent entity.
type OrderPercentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderPercentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (opuo *OrderPercentUpdateOne) SetCreatedAt(u uint32) *OrderPercentUpdateOne {
	opuo.mutation.ResetCreatedAt()
	opuo.mutation.SetCreatedAt(u)
	return opuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableCreatedAt(u *uint32) *OrderPercentUpdateOne {
	if u != nil {
		opuo.SetCreatedAt(*u)
	}
	return opuo
}

// AddCreatedAt adds u to the "created_at" field.
func (opuo *OrderPercentUpdateOne) AddCreatedAt(u int32) *OrderPercentUpdateOne {
	opuo.mutation.AddCreatedAt(u)
	return opuo
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrderPercentUpdateOne) SetUpdatedAt(u uint32) *OrderPercentUpdateOne {
	opuo.mutation.ResetUpdatedAt()
	opuo.mutation.SetUpdatedAt(u)
	return opuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (opuo *OrderPercentUpdateOne) AddUpdatedAt(u int32) *OrderPercentUpdateOne {
	opuo.mutation.AddUpdatedAt(u)
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrderPercentUpdateOne) SetDeletedAt(u uint32) *OrderPercentUpdateOne {
	opuo.mutation.ResetDeletedAt()
	opuo.mutation.SetDeletedAt(u)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableDeletedAt(u *uint32) *OrderPercentUpdateOne {
	if u != nil {
		opuo.SetDeletedAt(*u)
	}
	return opuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (opuo *OrderPercentUpdateOne) AddDeletedAt(u int32) *OrderPercentUpdateOne {
	opuo.mutation.AddDeletedAt(u)
	return opuo
}

// SetAppID sets the "app_id" field.
func (opuo *OrderPercentUpdateOne) SetAppID(u uuid.UUID) *OrderPercentUpdateOne {
	opuo.mutation.SetAppID(u)
	return opuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableAppID(u *uuid.UUID) *OrderPercentUpdateOne {
	if u != nil {
		opuo.SetAppID(*u)
	}
	return opuo
}

// ClearAppID clears the value of the "app_id" field.
func (opuo *OrderPercentUpdateOne) ClearAppID() *OrderPercentUpdateOne {
	opuo.mutation.ClearAppID()
	return opuo
}

// SetUserID sets the "user_id" field.
func (opuo *OrderPercentUpdateOne) SetUserID(u uuid.UUID) *OrderPercentUpdateOne {
	opuo.mutation.SetUserID(u)
	return opuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableUserID(u *uuid.UUID) *OrderPercentUpdateOne {
	if u != nil {
		opuo.SetUserID(*u)
	}
	return opuo
}

// ClearUserID clears the value of the "user_id" field.
func (opuo *OrderPercentUpdateOne) ClearUserID() *OrderPercentUpdateOne {
	opuo.mutation.ClearUserID()
	return opuo
}

// SetGoodID sets the "good_id" field.
func (opuo *OrderPercentUpdateOne) SetGoodID(u uuid.UUID) *OrderPercentUpdateOne {
	opuo.mutation.SetGoodID(u)
	return opuo
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableGoodID(u *uuid.UUID) *OrderPercentUpdateOne {
	if u != nil {
		opuo.SetGoodID(*u)
	}
	return opuo
}

// ClearGoodID clears the value of the "good_id" field.
func (opuo *OrderPercentUpdateOne) ClearGoodID() *OrderPercentUpdateOne {
	opuo.mutation.ClearGoodID()
	return opuo
}

// SetTitle sets the "title" field.
func (opuo *OrderPercentUpdateOne) SetTitle(s string) *OrderPercentUpdateOne {
	opuo.mutation.SetTitle(s)
	return opuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillableTitle(s *string) *OrderPercentUpdateOne {
	if s != nil {
		opuo.SetTitle(*s)
	}
	return opuo
}

// ClearTitle clears the value of the "title" field.
func (opuo *OrderPercentUpdateOne) ClearTitle() *OrderPercentUpdateOne {
	opuo.mutation.ClearTitle()
	return opuo
}

// SetPercent sets the "percent" field.
func (opuo *OrderPercentUpdateOne) SetPercent(d decimal.Decimal) *OrderPercentUpdateOne {
	opuo.mutation.SetPercent(d)
	return opuo
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (opuo *OrderPercentUpdateOne) SetNillablePercent(d *decimal.Decimal) *OrderPercentUpdateOne {
	if d != nil {
		opuo.SetPercent(*d)
	}
	return opuo
}

// ClearPercent clears the value of the "percent" field.
func (opuo *OrderPercentUpdateOne) ClearPercent() *OrderPercentUpdateOne {
	opuo.mutation.ClearPercent()
	return opuo
}

// SetStartAt sets the "start_at" field.
func (opuo *OrderPercentUpdateOne) SetStartAt(u uint32) *OrderPercentUpdateOne {
	opuo.mutation.ResetStartAt()
	opuo.mutation.SetStartAt(u)
	return opuo
}

// AddStartAt adds u to the "start_at" field.
func (opuo *OrderPercentUpdateOne) AddStartAt(u int32) *OrderPercentUpdateOne {
	opuo.mutation.AddStartAt(u)
	return opuo
}

// SetEndAt sets the "end_at" field.
func (opuo *OrderPercentUpdateOne) SetEndAt(u uint32) *OrderPercentUpdateOne {
	opuo.mutation.ResetEndAt()
	opuo.mutation.SetEndAt(u)
	return opuo
}

// AddEndAt adds u to the "end_at" field.
func (opuo *OrderPercentUpdateOne) AddEndAt(u int32) *OrderPercentUpdateOne {
	opuo.mutation.AddEndAt(u)
	return opuo
}

// SetBadgeLarge sets the "badge_large" field.
func (opuo *OrderPercentUpdateOne) SetBadgeLarge(s string) *OrderPercentUpdateOne {
	opuo.mutation.SetBadgeLarge(s)
	return opuo
}

// SetBadgeSmall sets the "badge_small" field.
func (opuo *OrderPercentUpdateOne) SetBadgeSmall(s string) *OrderPercentUpdateOne {
	opuo.mutation.SetBadgeSmall(s)
	return opuo
}

// Mutation returns the OrderPercentMutation object of the builder.
func (opuo *OrderPercentUpdateOne) Mutation() *OrderPercentMutation {
	return opuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrderPercentUpdateOne) Select(field string, fields ...string) *OrderPercentUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrderPercent entity.
func (opuo *OrderPercentUpdateOne) Save(ctx context.Context) (*OrderPercent, error) {
	var (
		err  error
		node *OrderPercent
	)
	if err := opuo.defaults(); err != nil {
		return nil, err
	}
	if len(opuo.hooks) == 0 {
		node, err = opuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			opuo.mutation = mutation
			node, err = opuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opuo.hooks) - 1; i >= 0; i-- {
			if opuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrderPercentUpdateOne) SaveX(ctx context.Context) *OrderPercent {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrderPercentUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrderPercentUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrderPercentUpdateOne) defaults() error {
	if _, ok := opuo.mutation.UpdatedAt(); !ok {
		if orderpercent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpercent.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (opuo *OrderPercentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderPercentUpdateOne {
	opuo.modifiers = append(opuo.modifiers, modifiers...)
	return opuo
}

func (opuo *OrderPercentUpdateOne) sqlSave(ctx context.Context) (_node *OrderPercent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpercent.Table,
			Columns: orderpercent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderpercent.FieldID,
			},
		},
	}
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderPercent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpercent.FieldID)
		for _, f := range fields {
			if !orderpercent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpercent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldCreatedAt,
		})
	}
	if value, ok := opuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldCreatedAt,
		})
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldDeletedAt,
		})
	}
	if value, ok := opuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldDeletedAt,
		})
	}
	if value, ok := opuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldAppID,
		})
	}
	if opuo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldAppID,
		})
	}
	if value, ok := opuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldUserID,
		})
	}
	if opuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldUserID,
		})
	}
	if value, ok := opuo.mutation.GoodID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldGoodID,
		})
	}
	if opuo.mutation.GoodIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: orderpercent.FieldGoodID,
		})
	}
	if value, ok := opuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldTitle,
		})
	}
	if opuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpercent.FieldTitle,
		})
	}
	if value, ok := opuo.mutation.Percent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpercent.FieldPercent,
		})
	}
	if opuo.mutation.PercentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: orderpercent.FieldPercent,
		})
	}
	if value, ok := opuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldStartAt,
		})
	}
	if value, ok := opuo.mutation.AddedStartAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldStartAt,
		})
	}
	if value, ok := opuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldEndAt,
		})
	}
	if value, ok := opuo.mutation.AddedEndAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldEndAt,
		})
	}
	if value, ok := opuo.mutation.BadgeLarge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeLarge,
		})
	}
	if value, ok := opuo.mutation.BadgeSmall(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeSmall,
		})
	}
	_spec.Modifiers = opuo.modifiers
	_node = &OrderPercent{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpercent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
