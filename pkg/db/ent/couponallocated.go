// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponallocated"
	"github.com/google/uuid"
)

// CouponAllocated is the model entity for the CouponAllocated schema.
type CouponAllocated struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// CouponID holds the value of the "coupon_id" field.
	CouponID uuid.UUID `json:"coupon_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponAllocated) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponallocated.FieldCreatedAt, couponallocated.FieldUpdatedAt, couponallocated.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case couponallocated.FieldType:
			values[i] = new(sql.NullString)
		case couponallocated.FieldID, couponallocated.FieldAppID, couponallocated.FieldUserID, couponallocated.FieldCouponID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponAllocated", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponAllocated fields.
func (ca *CouponAllocated) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponallocated.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ca.ID = *value
			}
		case couponallocated.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = uint32(value.Int64)
			}
		case couponallocated.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = uint32(value.Int64)
			}
		case couponallocated.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ca.DeletedAt = uint32(value.Int64)
			}
		case couponallocated.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ca.AppID = *value
			}
		case couponallocated.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ca.UserID = *value
			}
		case couponallocated.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ca.Type = value.String
			}
		case couponallocated.FieldCouponID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coupon_id", values[i])
			} else if value != nil {
				ca.CouponID = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CouponAllocated.
// Note that you need to call CouponAllocated.Unwrap() before calling this method if this CouponAllocated
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponAllocated) Update() *CouponAllocatedUpdateOne {
	return (&CouponAllocatedClient{config: ca.config}).UpdateOne(ca)
}

// Unwrap unwraps the CouponAllocated entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponAllocated) Unwrap() *CouponAllocated {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponAllocated is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponAllocated) String() string {
	var builder strings.Builder
	builder.WriteString("CouponAllocated(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ca.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.UserID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ca.Type)
	builder.WriteString(", ")
	builder.WriteString("coupon_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.CouponID))
	builder.WriteByte(')')
	return builder.String()
}

// CouponAllocateds is a parsable slice of CouponAllocated.
type CouponAllocateds []*CouponAllocated

func (ca CouponAllocateds) config(cfg config) {
	for _i := range ca {
		ca[_i].config = cfg
	}
}
