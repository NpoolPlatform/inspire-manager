// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/orderpercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPercent is the model entity for the OrderPercent schema.
type OrderPercent struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Percent holds the value of the "percent" field.
	Percent decimal.Decimal `json:"percent,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt uint32 `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt uint32 `json:"end_at,omitempty"`
	// BadgeLarge holds the value of the "badge_large" field.
	BadgeLarge string `json:"badge_large,omitempty"`
	// BadgeSmall holds the value of the "badge_small" field.
	BadgeSmall string `json:"badge_small,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderPercent) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderpercent.FieldPercent:
			values[i] = new(decimal.Decimal)
		case orderpercent.FieldCreatedAt, orderpercent.FieldUpdatedAt, orderpercent.FieldDeletedAt, orderpercent.FieldStartAt, orderpercent.FieldEndAt:
			values[i] = new(sql.NullInt64)
		case orderpercent.FieldTitle, orderpercent.FieldBadgeLarge, orderpercent.FieldBadgeSmall:
			values[i] = new(sql.NullString)
		case orderpercent.FieldID, orderpercent.FieldAppID, orderpercent.FieldUserID, orderpercent.FieldGoodID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderPercent", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderPercent fields.
func (op *OrderPercent) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderpercent.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				op.ID = *value
			}
		case orderpercent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				op.CreatedAt = uint32(value.Int64)
			}
		case orderpercent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				op.UpdatedAt = uint32(value.Int64)
			}
		case orderpercent.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				op.DeletedAt = uint32(value.Int64)
			}
		case orderpercent.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				op.AppID = *value
			}
		case orderpercent.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				op.UserID = *value
			}
		case orderpercent.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				op.GoodID = *value
			}
		case orderpercent.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				op.Title = value.String
			}
		case orderpercent.FieldPercent:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field percent", values[i])
			} else if value != nil {
				op.Percent = *value
			}
		case orderpercent.FieldStartAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				op.StartAt = uint32(value.Int64)
			}
		case orderpercent.FieldEndAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				op.EndAt = uint32(value.Int64)
			}
		case orderpercent.FieldBadgeLarge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_large", values[i])
			} else if value.Valid {
				op.BadgeLarge = value.String
			}
		case orderpercent.FieldBadgeSmall:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field badge_small", values[i])
			} else if value.Valid {
				op.BadgeSmall = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderPercent.
// Note that you need to call OrderPercent.Unwrap() before calling this method if this OrderPercent
// was returned from a transaction, and the transaction was committed or rolled back.
func (op *OrderPercent) Update() *OrderPercentUpdateOne {
	return (&OrderPercentClient{config: op.config}).UpdateOne(op)
}

// Unwrap unwraps the OrderPercent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (op *OrderPercent) Unwrap() *OrderPercent {
	_tx, ok := op.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderPercent is not a transactional entity")
	}
	op.config.driver = _tx.drv
	return op
}

// String implements the fmt.Stringer.
func (op *OrderPercent) String() string {
	var builder strings.Builder
	builder.WriteString("OrderPercent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", op.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", op.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", op.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", op.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", op.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", op.UserID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", op.GoodID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(op.Title)
	builder.WriteString(", ")
	builder.WriteString("percent=")
	builder.WriteString(fmt.Sprintf("%v", op.Percent))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(fmt.Sprintf("%v", op.StartAt))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(fmt.Sprintf("%v", op.EndAt))
	builder.WriteString(", ")
	builder.WriteString("badge_large=")
	builder.WriteString(op.BadgeLarge)
	builder.WriteString(", ")
	builder.WriteString("badge_small=")
	builder.WriteString(op.BadgeSmall)
	builder.WriteByte(')')
	return builder.String()
}

// OrderPercents is a parsable slice of OrderPercent.
type OrderPercents []*OrderPercent

func (op OrderPercents) config(cfg config) {
	for _i := range op {
		op[_i].config = cfg
	}
}
