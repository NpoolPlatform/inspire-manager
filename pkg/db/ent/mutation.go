// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponallocated"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/coupondiscount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponfixamount"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/couponspecialoffer"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCouponAllocated    = "CouponAllocated"
	TypeCouponDiscount     = "CouponDiscount"
	TypeCouponFixAmount    = "CouponFixAmount"
	TypeCouponSpecialOffer = "CouponSpecialOffer"
)

// CouponAllocatedMutation represents an operation that mutates the CouponAllocated nodes in the graph.
type CouponAllocatedMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	_type         *string
	coupon_id     *uuid.UUID
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CouponAllocated, error)
	predicates    []predicate.CouponAllocated
}

var _ ent.Mutation = (*CouponAllocatedMutation)(nil)

// couponallocatedOption allows management of the mutation configuration using functional options.
type couponallocatedOption func(*CouponAllocatedMutation)

// newCouponAllocatedMutation creates new mutation for the CouponAllocated entity.
func newCouponAllocatedMutation(c config, op Op, opts ...couponallocatedOption) *CouponAllocatedMutation {
	m := &CouponAllocatedMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponAllocated,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponAllocatedID sets the ID field of the mutation.
func withCouponAllocatedID(id uuid.UUID) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponAllocated
		)
		m.oldValue = func(ctx context.Context) (*CouponAllocated, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponAllocated.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponAllocated sets the old CouponAllocated of the mutation.
func withCouponAllocated(node *CouponAllocated) couponallocatedOption {
	return func(m *CouponAllocatedMutation) {
		m.oldValue = func(context.Context) (*CouponAllocated, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponAllocatedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponAllocatedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponAllocated entities.
func (m *CouponAllocatedMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponAllocatedMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponAllocatedMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponAllocated.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponAllocatedMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponAllocatedMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CouponAllocatedMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponAllocatedMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponAllocatedMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponAllocatedMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CouponAllocatedMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponAllocatedMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CouponAllocatedMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CouponAllocatedMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CouponAllocatedMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CouponAllocatedMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CouponAllocatedMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponAllocatedMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponAllocatedMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponAllocatedMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CouponAllocatedMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CouponAllocatedMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CouponAllocatedMutation) ResetUserID() {
	m.user_id = nil
}

// SetType sets the "type" field.
func (m *CouponAllocatedMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CouponAllocatedMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *CouponAllocatedMutation) ClearType() {
	m._type = nil
	m.clearedFields[couponallocated.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *CouponAllocatedMutation) TypeCleared() bool {
	_, ok := m.clearedFields[couponallocated.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *CouponAllocatedMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, couponallocated.FieldType)
}

// SetCouponID sets the "coupon_id" field.
func (m *CouponAllocatedMutation) SetCouponID(u uuid.UUID) {
	m.coupon_id = &u
}

// CouponID returns the value of the "coupon_id" field in the mutation.
func (m *CouponAllocatedMutation) CouponID() (r uuid.UUID, exists bool) {
	v := m.coupon_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponID returns the old "coupon_id" field's value of the CouponAllocated entity.
// If the CouponAllocated object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAllocatedMutation) OldCouponID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponID: %w", err)
	}
	return oldValue.CouponID, nil
}

// ResetCouponID resets all changes to the "coupon_id" field.
func (m *CouponAllocatedMutation) ResetCouponID() {
	m.coupon_id = nil
}

// Where appends a list predicates to the CouponAllocatedMutation builder.
func (m *CouponAllocatedMutation) Where(ps ...predicate.CouponAllocated) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponAllocatedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponAllocated).
func (m *CouponAllocatedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponAllocatedMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, couponallocated.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, couponallocated.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, couponallocated.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, couponallocated.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, couponallocated.FieldUserID)
	}
	if m._type != nil {
		fields = append(fields, couponallocated.FieldType)
	}
	if m.coupon_id != nil {
		fields = append(fields, couponallocated.FieldCouponID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponAllocatedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldCreatedAt:
		return m.CreatedAt()
	case couponallocated.FieldUpdatedAt:
		return m.UpdatedAt()
	case couponallocated.FieldDeletedAt:
		return m.DeletedAt()
	case couponallocated.FieldAppID:
		return m.AppID()
	case couponallocated.FieldUserID:
		return m.UserID()
	case couponallocated.FieldType:
		return m.GetType()
	case couponallocated.FieldCouponID:
		return m.CouponID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponAllocatedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponallocated.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case couponallocated.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case couponallocated.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case couponallocated.FieldAppID:
		return m.OldAppID(ctx)
	case couponallocated.FieldUserID:
		return m.OldUserID(ctx)
	case couponallocated.FieldType:
		return m.OldType(ctx)
	case couponallocated.FieldCouponID:
		return m.OldCouponID(ctx)
	}
	return nil, fmt.Errorf("unknown CouponAllocated field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case couponallocated.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case couponallocated.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case couponallocated.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponallocated.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case couponallocated.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case couponallocated.FieldCouponID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponID(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponAllocatedMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, couponallocated.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, couponallocated.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, couponallocated.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponAllocatedMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponallocated.FieldCreatedAt:
		return m.AddedCreatedAt()
	case couponallocated.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case couponallocated.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAllocatedMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponallocated.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case couponallocated.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case couponallocated.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponAllocatedMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(couponallocated.FieldType) {
		fields = append(fields, couponallocated.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponAllocatedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ClearField(name string) error {
	switch name {
	case couponallocated.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponAllocatedMutation) ResetField(name string) error {
	switch name {
	case couponallocated.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case couponallocated.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case couponallocated.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case couponallocated.FieldAppID:
		m.ResetAppID()
		return nil
	case couponallocated.FieldUserID:
		m.ResetUserID()
		return nil
	case couponallocated.FieldType:
		m.ResetType()
		return nil
	case couponallocated.FieldCouponID:
		m.ResetCouponID()
		return nil
	}
	return fmt.Errorf("unknown CouponAllocated field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponAllocatedMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponAllocatedMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponAllocatedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponAllocatedMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponAllocatedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponAllocatedMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponAllocatedMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponAllocatedMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponAllocated edge %s", name)
}

// CouponDiscountMutation represents an operation that mutates the CouponDiscount nodes in the graph.
type CouponDiscountMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *uint32
	addcreated_at      *int32
	updated_at         *uint32
	addupdated_at      *int32
	deleted_at         *uint32
	adddeleted_at      *int32
	app_id             *uuid.UUID
	discount           *decimal.Decimal
	release_by_user_id *uuid.UUID
	start_at           *uint32
	addstart_at        *int32
	duration_days      *uint32
	addduration_days   *int32
	message            *string
	name               *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CouponDiscount, error)
	predicates         []predicate.CouponDiscount
}

var _ ent.Mutation = (*CouponDiscountMutation)(nil)

// coupondiscountOption allows management of the mutation configuration using functional options.
type coupondiscountOption func(*CouponDiscountMutation)

// newCouponDiscountMutation creates new mutation for the CouponDiscount entity.
func newCouponDiscountMutation(c config, op Op, opts ...coupondiscountOption) *CouponDiscountMutation {
	m := &CouponDiscountMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponDiscount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponDiscountID sets the ID field of the mutation.
func withCouponDiscountID(id uuid.UUID) coupondiscountOption {
	return func(m *CouponDiscountMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponDiscount
		)
		m.oldValue = func(ctx context.Context) (*CouponDiscount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponDiscount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponDiscount sets the old CouponDiscount of the mutation.
func withCouponDiscount(node *CouponDiscount) coupondiscountOption {
	return func(m *CouponDiscountMutation) {
		m.oldValue = func(context.Context) (*CouponDiscount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponDiscountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponDiscountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponDiscount entities.
func (m *CouponDiscountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponDiscountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponDiscountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponDiscount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponDiscountMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponDiscountMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CouponDiscountMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CouponDiscountMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponDiscountMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponDiscountMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponDiscountMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CouponDiscountMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CouponDiscountMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponDiscountMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CouponDiscountMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CouponDiscountMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CouponDiscountMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CouponDiscountMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CouponDiscountMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponDiscountMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponDiscountMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponDiscountMutation) ResetAppID() {
	m.app_id = nil
}

// SetDiscount sets the "discount" field.
func (m *CouponDiscountMutation) SetDiscount(d decimal.Decimal) {
	m.discount = &d
}

// Discount returns the value of the "discount" field in the mutation.
func (m *CouponDiscountMutation) Discount() (r decimal.Decimal, exists bool) {
	v := m.discount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscount returns the old "discount" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldDiscount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscount: %w", err)
	}
	return oldValue.Discount, nil
}

// ClearDiscount clears the value of the "discount" field.
func (m *CouponDiscountMutation) ClearDiscount() {
	m.discount = nil
	m.clearedFields[coupondiscount.FieldDiscount] = struct{}{}
}

// DiscountCleared returns if the "discount" field was cleared in this mutation.
func (m *CouponDiscountMutation) DiscountCleared() bool {
	_, ok := m.clearedFields[coupondiscount.FieldDiscount]
	return ok
}

// ResetDiscount resets all changes to the "discount" field.
func (m *CouponDiscountMutation) ResetDiscount() {
	m.discount = nil
	delete(m.clearedFields, coupondiscount.FieldDiscount)
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *CouponDiscountMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *CouponDiscountMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *CouponDiscountMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStartAt sets the "start_at" field.
func (m *CouponDiscountMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *CouponDiscountMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *CouponDiscountMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *CouponDiscountMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *CouponDiscountMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[coupondiscount.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *CouponDiscountMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[coupondiscount.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *CouponDiscountMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, coupondiscount.FieldStartAt)
}

// SetDurationDays sets the "duration_days" field.
func (m *CouponDiscountMutation) SetDurationDays(u uint32) {
	m.duration_days = &u
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *CouponDiscountMutation) DurationDays() (r uint32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldDurationDays(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds u to the "duration_days" field.
func (m *CouponDiscountMutation) AddDurationDays(u int32) {
	if m.addduration_days != nil {
		*m.addduration_days += u
	} else {
		m.addduration_days = &u
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *CouponDiscountMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationDays clears the value of the "duration_days" field.
func (m *CouponDiscountMutation) ClearDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	m.clearedFields[coupondiscount.FieldDurationDays] = struct{}{}
}

// DurationDaysCleared returns if the "duration_days" field was cleared in this mutation.
func (m *CouponDiscountMutation) DurationDaysCleared() bool {
	_, ok := m.clearedFields[coupondiscount.FieldDurationDays]
	return ok
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *CouponDiscountMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	delete(m.clearedFields, coupondiscount.FieldDurationDays)
}

// SetMessage sets the "message" field.
func (m *CouponDiscountMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CouponDiscountMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CouponDiscountMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[coupondiscount.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CouponDiscountMutation) MessageCleared() bool {
	_, ok := m.clearedFields[coupondiscount.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CouponDiscountMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, coupondiscount.FieldMessage)
}

// SetName sets the "name" field.
func (m *CouponDiscountMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponDiscountMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CouponDiscount entity.
// If the CouponDiscount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponDiscountMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CouponDiscountMutation) ClearName() {
	m.name = nil
	m.clearedFields[coupondiscount.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CouponDiscountMutation) NameCleared() bool {
	_, ok := m.clearedFields[coupondiscount.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CouponDiscountMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, coupondiscount.FieldName)
}

// Where appends a list predicates to the CouponDiscountMutation builder.
func (m *CouponDiscountMutation) Where(ps ...predicate.CouponDiscount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponDiscountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponDiscount).
func (m *CouponDiscountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponDiscountMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, coupondiscount.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coupondiscount.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, coupondiscount.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, coupondiscount.FieldAppID)
	}
	if m.discount != nil {
		fields = append(fields, coupondiscount.FieldDiscount)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, coupondiscount.FieldReleaseByUserID)
	}
	if m.start_at != nil {
		fields = append(fields, coupondiscount.FieldStartAt)
	}
	if m.duration_days != nil {
		fields = append(fields, coupondiscount.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, coupondiscount.FieldMessage)
	}
	if m.name != nil {
		fields = append(fields, coupondiscount.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponDiscountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coupondiscount.FieldCreatedAt:
		return m.CreatedAt()
	case coupondiscount.FieldUpdatedAt:
		return m.UpdatedAt()
	case coupondiscount.FieldDeletedAt:
		return m.DeletedAt()
	case coupondiscount.FieldAppID:
		return m.AppID()
	case coupondiscount.FieldDiscount:
		return m.Discount()
	case coupondiscount.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case coupondiscount.FieldStartAt:
		return m.StartAt()
	case coupondiscount.FieldDurationDays:
		return m.DurationDays()
	case coupondiscount.FieldMessage:
		return m.Message()
	case coupondiscount.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponDiscountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coupondiscount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coupondiscount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coupondiscount.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case coupondiscount.FieldAppID:
		return m.OldAppID(ctx)
	case coupondiscount.FieldDiscount:
		return m.OldDiscount(ctx)
	case coupondiscount.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case coupondiscount.FieldStartAt:
		return m.OldStartAt(ctx)
	case coupondiscount.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case coupondiscount.FieldMessage:
		return m.OldMessage(ctx)
	case coupondiscount.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown CouponDiscount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponDiscountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coupondiscount.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coupondiscount.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coupondiscount.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case coupondiscount.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case coupondiscount.FieldDiscount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscount(v)
		return nil
	case coupondiscount.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case coupondiscount.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case coupondiscount.FieldDurationDays:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case coupondiscount.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case coupondiscount.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown CouponDiscount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponDiscountMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, coupondiscount.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, coupondiscount.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, coupondiscount.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, coupondiscount.FieldStartAt)
	}
	if m.addduration_days != nil {
		fields = append(fields, coupondiscount.FieldDurationDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponDiscountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coupondiscount.FieldCreatedAt:
		return m.AddedCreatedAt()
	case coupondiscount.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case coupondiscount.FieldDeletedAt:
		return m.AddedDeletedAt()
	case coupondiscount.FieldStartAt:
		return m.AddedStartAt()
	case coupondiscount.FieldDurationDays:
		return m.AddedDurationDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponDiscountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coupondiscount.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case coupondiscount.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case coupondiscount.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case coupondiscount.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case coupondiscount.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	}
	return fmt.Errorf("unknown CouponDiscount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponDiscountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coupondiscount.FieldDiscount) {
		fields = append(fields, coupondiscount.FieldDiscount)
	}
	if m.FieldCleared(coupondiscount.FieldStartAt) {
		fields = append(fields, coupondiscount.FieldStartAt)
	}
	if m.FieldCleared(coupondiscount.FieldDurationDays) {
		fields = append(fields, coupondiscount.FieldDurationDays)
	}
	if m.FieldCleared(coupondiscount.FieldMessage) {
		fields = append(fields, coupondiscount.FieldMessage)
	}
	if m.FieldCleared(coupondiscount.FieldName) {
		fields = append(fields, coupondiscount.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponDiscountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponDiscountMutation) ClearField(name string) error {
	switch name {
	case coupondiscount.FieldDiscount:
		m.ClearDiscount()
		return nil
	case coupondiscount.FieldStartAt:
		m.ClearStartAt()
		return nil
	case coupondiscount.FieldDurationDays:
		m.ClearDurationDays()
		return nil
	case coupondiscount.FieldMessage:
		m.ClearMessage()
		return nil
	case coupondiscount.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown CouponDiscount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponDiscountMutation) ResetField(name string) error {
	switch name {
	case coupondiscount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coupondiscount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coupondiscount.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case coupondiscount.FieldAppID:
		m.ResetAppID()
		return nil
	case coupondiscount.FieldDiscount:
		m.ResetDiscount()
		return nil
	case coupondiscount.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case coupondiscount.FieldStartAt:
		m.ResetStartAt()
		return nil
	case coupondiscount.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case coupondiscount.FieldMessage:
		m.ResetMessage()
		return nil
	case coupondiscount.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown CouponDiscount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponDiscountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponDiscountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponDiscountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponDiscountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponDiscountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponDiscountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponDiscountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponDiscount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponDiscountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponDiscount edge %s", name)
}

// CouponFixAmountMutation represents an operation that mutates the CouponFixAmount nodes in the graph.
type CouponFixAmountMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *uint32
	addcreated_at      *int32
	updated_at         *uint32
	addupdated_at      *int32
	deleted_at         *uint32
	adddeleted_at      *int32
	app_id             *uuid.UUID
	denomination       *decimal.Decimal
	circulation        *decimal.Decimal
	release_by_user_id *uuid.UUID
	start_at           *uint32
	addstart_at        *int32
	duration_days      *uint32
	addduration_days   *int32
	message            *string
	name               *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CouponFixAmount, error)
	predicates         []predicate.CouponFixAmount
}

var _ ent.Mutation = (*CouponFixAmountMutation)(nil)

// couponfixamountOption allows management of the mutation configuration using functional options.
type couponfixamountOption func(*CouponFixAmountMutation)

// newCouponFixAmountMutation creates new mutation for the CouponFixAmount entity.
func newCouponFixAmountMutation(c config, op Op, opts ...couponfixamountOption) *CouponFixAmountMutation {
	m := &CouponFixAmountMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponFixAmount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponFixAmountID sets the ID field of the mutation.
func withCouponFixAmountID(id uuid.UUID) couponfixamountOption {
	return func(m *CouponFixAmountMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponFixAmount
		)
		m.oldValue = func(ctx context.Context) (*CouponFixAmount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponFixAmount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponFixAmount sets the old CouponFixAmount of the mutation.
func withCouponFixAmount(node *CouponFixAmount) couponfixamountOption {
	return func(m *CouponFixAmountMutation) {
		m.oldValue = func(context.Context) (*CouponFixAmount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponFixAmountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponFixAmountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponFixAmount entities.
func (m *CouponFixAmountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponFixAmountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponFixAmountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponFixAmount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponFixAmountMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponFixAmountMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CouponFixAmountMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CouponFixAmountMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponFixAmountMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponFixAmountMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponFixAmountMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CouponFixAmountMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CouponFixAmountMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponFixAmountMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CouponFixAmountMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CouponFixAmountMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CouponFixAmountMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CouponFixAmountMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CouponFixAmountMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponFixAmountMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponFixAmountMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponFixAmountMutation) ResetAppID() {
	m.app_id = nil
}

// SetDenomination sets the "denomination" field.
func (m *CouponFixAmountMutation) SetDenomination(d decimal.Decimal) {
	m.denomination = &d
}

// Denomination returns the value of the "denomination" field in the mutation.
func (m *CouponFixAmountMutation) Denomination() (r decimal.Decimal, exists bool) {
	v := m.denomination
	if v == nil {
		return
	}
	return *v, true
}

// OldDenomination returns the old "denomination" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldDenomination(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDenomination is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDenomination requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDenomination: %w", err)
	}
	return oldValue.Denomination, nil
}

// ClearDenomination clears the value of the "denomination" field.
func (m *CouponFixAmountMutation) ClearDenomination() {
	m.denomination = nil
	m.clearedFields[couponfixamount.FieldDenomination] = struct{}{}
}

// DenominationCleared returns if the "denomination" field was cleared in this mutation.
func (m *CouponFixAmountMutation) DenominationCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldDenomination]
	return ok
}

// ResetDenomination resets all changes to the "denomination" field.
func (m *CouponFixAmountMutation) ResetDenomination() {
	m.denomination = nil
	delete(m.clearedFields, couponfixamount.FieldDenomination)
}

// SetCirculation sets the "circulation" field.
func (m *CouponFixAmountMutation) SetCirculation(d decimal.Decimal) {
	m.circulation = &d
}

// Circulation returns the value of the "circulation" field in the mutation.
func (m *CouponFixAmountMutation) Circulation() (r decimal.Decimal, exists bool) {
	v := m.circulation
	if v == nil {
		return
	}
	return *v, true
}

// OldCirculation returns the old "circulation" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldCirculation(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCirculation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCirculation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCirculation: %w", err)
	}
	return oldValue.Circulation, nil
}

// ClearCirculation clears the value of the "circulation" field.
func (m *CouponFixAmountMutation) ClearCirculation() {
	m.circulation = nil
	m.clearedFields[couponfixamount.FieldCirculation] = struct{}{}
}

// CirculationCleared returns if the "circulation" field was cleared in this mutation.
func (m *CouponFixAmountMutation) CirculationCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldCirculation]
	return ok
}

// ResetCirculation resets all changes to the "circulation" field.
func (m *CouponFixAmountMutation) ResetCirculation() {
	m.circulation = nil
	delete(m.clearedFields, couponfixamount.FieldCirculation)
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *CouponFixAmountMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *CouponFixAmountMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *CouponFixAmountMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStartAt sets the "start_at" field.
func (m *CouponFixAmountMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *CouponFixAmountMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *CouponFixAmountMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *CouponFixAmountMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *CouponFixAmountMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[couponfixamount.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *CouponFixAmountMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *CouponFixAmountMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, couponfixamount.FieldStartAt)
}

// SetDurationDays sets the "duration_days" field.
func (m *CouponFixAmountMutation) SetDurationDays(u uint32) {
	m.duration_days = &u
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *CouponFixAmountMutation) DurationDays() (r uint32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldDurationDays(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds u to the "duration_days" field.
func (m *CouponFixAmountMutation) AddDurationDays(u int32) {
	if m.addduration_days != nil {
		*m.addduration_days += u
	} else {
		m.addduration_days = &u
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *CouponFixAmountMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationDays clears the value of the "duration_days" field.
func (m *CouponFixAmountMutation) ClearDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	m.clearedFields[couponfixamount.FieldDurationDays] = struct{}{}
}

// DurationDaysCleared returns if the "duration_days" field was cleared in this mutation.
func (m *CouponFixAmountMutation) DurationDaysCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldDurationDays]
	return ok
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *CouponFixAmountMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	delete(m.clearedFields, couponfixamount.FieldDurationDays)
}

// SetMessage sets the "message" field.
func (m *CouponFixAmountMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CouponFixAmountMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CouponFixAmountMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[couponfixamount.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CouponFixAmountMutation) MessageCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CouponFixAmountMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, couponfixamount.FieldMessage)
}

// SetName sets the "name" field.
func (m *CouponFixAmountMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponFixAmountMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CouponFixAmount entity.
// If the CouponFixAmount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponFixAmountMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *CouponFixAmountMutation) ClearName() {
	m.name = nil
	m.clearedFields[couponfixamount.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *CouponFixAmountMutation) NameCleared() bool {
	_, ok := m.clearedFields[couponfixamount.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *CouponFixAmountMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, couponfixamount.FieldName)
}

// Where appends a list predicates to the CouponFixAmountMutation builder.
func (m *CouponFixAmountMutation) Where(ps ...predicate.CouponFixAmount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponFixAmountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponFixAmount).
func (m *CouponFixAmountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponFixAmountMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, couponfixamount.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, couponfixamount.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, couponfixamount.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, couponfixamount.FieldAppID)
	}
	if m.denomination != nil {
		fields = append(fields, couponfixamount.FieldDenomination)
	}
	if m.circulation != nil {
		fields = append(fields, couponfixamount.FieldCirculation)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, couponfixamount.FieldReleaseByUserID)
	}
	if m.start_at != nil {
		fields = append(fields, couponfixamount.FieldStartAt)
	}
	if m.duration_days != nil {
		fields = append(fields, couponfixamount.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, couponfixamount.FieldMessage)
	}
	if m.name != nil {
		fields = append(fields, couponfixamount.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponFixAmountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponfixamount.FieldCreatedAt:
		return m.CreatedAt()
	case couponfixamount.FieldUpdatedAt:
		return m.UpdatedAt()
	case couponfixamount.FieldDeletedAt:
		return m.DeletedAt()
	case couponfixamount.FieldAppID:
		return m.AppID()
	case couponfixamount.FieldDenomination:
		return m.Denomination()
	case couponfixamount.FieldCirculation:
		return m.Circulation()
	case couponfixamount.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case couponfixamount.FieldStartAt:
		return m.StartAt()
	case couponfixamount.FieldDurationDays:
		return m.DurationDays()
	case couponfixamount.FieldMessage:
		return m.Message()
	case couponfixamount.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponFixAmountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponfixamount.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case couponfixamount.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case couponfixamount.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case couponfixamount.FieldAppID:
		return m.OldAppID(ctx)
	case couponfixamount.FieldDenomination:
		return m.OldDenomination(ctx)
	case couponfixamount.FieldCirculation:
		return m.OldCirculation(ctx)
	case couponfixamount.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case couponfixamount.FieldStartAt:
		return m.OldStartAt(ctx)
	case couponfixamount.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case couponfixamount.FieldMessage:
		return m.OldMessage(ctx)
	case couponfixamount.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown CouponFixAmount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponFixAmountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponfixamount.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case couponfixamount.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case couponfixamount.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case couponfixamount.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponfixamount.FieldDenomination:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDenomination(v)
		return nil
	case couponfixamount.FieldCirculation:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCirculation(v)
		return nil
	case couponfixamount.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case couponfixamount.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case couponfixamount.FieldDurationDays:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case couponfixamount.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case couponfixamount.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown CouponFixAmount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponFixAmountMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, couponfixamount.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, couponfixamount.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, couponfixamount.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, couponfixamount.FieldStartAt)
	}
	if m.addduration_days != nil {
		fields = append(fields, couponfixamount.FieldDurationDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponFixAmountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponfixamount.FieldCreatedAt:
		return m.AddedCreatedAt()
	case couponfixamount.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case couponfixamount.FieldDeletedAt:
		return m.AddedDeletedAt()
	case couponfixamount.FieldStartAt:
		return m.AddedStartAt()
	case couponfixamount.FieldDurationDays:
		return m.AddedDurationDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponFixAmountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponfixamount.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case couponfixamount.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case couponfixamount.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case couponfixamount.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case couponfixamount.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	}
	return fmt.Errorf("unknown CouponFixAmount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponFixAmountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(couponfixamount.FieldDenomination) {
		fields = append(fields, couponfixamount.FieldDenomination)
	}
	if m.FieldCleared(couponfixamount.FieldCirculation) {
		fields = append(fields, couponfixamount.FieldCirculation)
	}
	if m.FieldCleared(couponfixamount.FieldStartAt) {
		fields = append(fields, couponfixamount.FieldStartAt)
	}
	if m.FieldCleared(couponfixamount.FieldDurationDays) {
		fields = append(fields, couponfixamount.FieldDurationDays)
	}
	if m.FieldCleared(couponfixamount.FieldMessage) {
		fields = append(fields, couponfixamount.FieldMessage)
	}
	if m.FieldCleared(couponfixamount.FieldName) {
		fields = append(fields, couponfixamount.FieldName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponFixAmountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponFixAmountMutation) ClearField(name string) error {
	switch name {
	case couponfixamount.FieldDenomination:
		m.ClearDenomination()
		return nil
	case couponfixamount.FieldCirculation:
		m.ClearCirculation()
		return nil
	case couponfixamount.FieldStartAt:
		m.ClearStartAt()
		return nil
	case couponfixamount.FieldDurationDays:
		m.ClearDurationDays()
		return nil
	case couponfixamount.FieldMessage:
		m.ClearMessage()
		return nil
	case couponfixamount.FieldName:
		m.ClearName()
		return nil
	}
	return fmt.Errorf("unknown CouponFixAmount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponFixAmountMutation) ResetField(name string) error {
	switch name {
	case couponfixamount.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case couponfixamount.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case couponfixamount.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case couponfixamount.FieldAppID:
		m.ResetAppID()
		return nil
	case couponfixamount.FieldDenomination:
		m.ResetDenomination()
		return nil
	case couponfixamount.FieldCirculation:
		m.ResetCirculation()
		return nil
	case couponfixamount.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case couponfixamount.FieldStartAt:
		m.ResetStartAt()
		return nil
	case couponfixamount.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case couponfixamount.FieldMessage:
		m.ResetMessage()
		return nil
	case couponfixamount.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown CouponFixAmount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponFixAmountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponFixAmountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponFixAmountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponFixAmountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponFixAmountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponFixAmountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponFixAmountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponFixAmount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponFixAmountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponFixAmount edge %s", name)
}

// CouponSpecialOfferMutation represents an operation that mutates the CouponSpecialOffer nodes in the graph.
type CouponSpecialOfferMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	created_at         *uint32
	addcreated_at      *int32
	updated_at         *uint32
	addupdated_at      *int32
	deleted_at         *uint32
	adddeleted_at      *int32
	app_id             *uuid.UUID
	user_id            *uuid.UUID
	amount             *decimal.Decimal
	release_by_user_id *uuid.UUID
	start_at           *uint32
	addstart_at        *int32
	duration_days      *uint32
	addduration_days   *int32
	message            *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*CouponSpecialOffer, error)
	predicates         []predicate.CouponSpecialOffer
}

var _ ent.Mutation = (*CouponSpecialOfferMutation)(nil)

// couponspecialofferOption allows management of the mutation configuration using functional options.
type couponspecialofferOption func(*CouponSpecialOfferMutation)

// newCouponSpecialOfferMutation creates new mutation for the CouponSpecialOffer entity.
func newCouponSpecialOfferMutation(c config, op Op, opts ...couponspecialofferOption) *CouponSpecialOfferMutation {
	m := &CouponSpecialOfferMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponSpecialOffer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponSpecialOfferID sets the ID field of the mutation.
func withCouponSpecialOfferID(id uuid.UUID) couponspecialofferOption {
	return func(m *CouponSpecialOfferMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponSpecialOffer
		)
		m.oldValue = func(ctx context.Context) (*CouponSpecialOffer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponSpecialOffer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponSpecialOffer sets the old CouponSpecialOffer of the mutation.
func withCouponSpecialOffer(node *CouponSpecialOffer) couponspecialofferOption {
	return func(m *CouponSpecialOfferMutation) {
		m.oldValue = func(context.Context) (*CouponSpecialOffer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponSpecialOfferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponSpecialOfferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CouponSpecialOffer entities.
func (m *CouponSpecialOfferMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponSpecialOfferMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponSpecialOfferMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponSpecialOffer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponSpecialOfferMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponSpecialOfferMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *CouponSpecialOfferMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *CouponSpecialOfferMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponSpecialOfferMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponSpecialOfferMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponSpecialOfferMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *CouponSpecialOfferMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *CouponSpecialOfferMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponSpecialOfferMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CouponSpecialOfferMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CouponSpecialOfferMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *CouponSpecialOfferMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *CouponSpecialOfferMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CouponSpecialOfferMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *CouponSpecialOfferMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CouponSpecialOfferMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CouponSpecialOfferMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CouponSpecialOfferMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CouponSpecialOfferMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CouponSpecialOfferMutation) ResetUserID() {
	m.user_id = nil
}

// SetAmount sets the "amount" field.
func (m *CouponSpecialOfferMutation) SetAmount(d decimal.Decimal) {
	m.amount = &d
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CouponSpecialOfferMutation) Amount() (r decimal.Decimal, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldAmount(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// ClearAmount clears the value of the "amount" field.
func (m *CouponSpecialOfferMutation) ClearAmount() {
	m.amount = nil
	m.clearedFields[couponspecialoffer.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *CouponSpecialOfferMutation) AmountCleared() bool {
	_, ok := m.clearedFields[couponspecialoffer.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *CouponSpecialOfferMutation) ResetAmount() {
	m.amount = nil
	delete(m.clearedFields, couponspecialoffer.FieldAmount)
}

// SetReleaseByUserID sets the "release_by_user_id" field.
func (m *CouponSpecialOfferMutation) SetReleaseByUserID(u uuid.UUID) {
	m.release_by_user_id = &u
}

// ReleaseByUserID returns the value of the "release_by_user_id" field in the mutation.
func (m *CouponSpecialOfferMutation) ReleaseByUserID() (r uuid.UUID, exists bool) {
	v := m.release_by_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseByUserID returns the old "release_by_user_id" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldReleaseByUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseByUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseByUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseByUserID: %w", err)
	}
	return oldValue.ReleaseByUserID, nil
}

// ResetReleaseByUserID resets all changes to the "release_by_user_id" field.
func (m *CouponSpecialOfferMutation) ResetReleaseByUserID() {
	m.release_by_user_id = nil
}

// SetStartAt sets the "start_at" field.
func (m *CouponSpecialOfferMutation) SetStartAt(u uint32) {
	m.start_at = &u
	m.addstart_at = nil
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *CouponSpecialOfferMutation) StartAt() (r uint32, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldStartAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// AddStartAt adds u to the "start_at" field.
func (m *CouponSpecialOfferMutation) AddStartAt(u int32) {
	if m.addstart_at != nil {
		*m.addstart_at += u
	} else {
		m.addstart_at = &u
	}
}

// AddedStartAt returns the value that was added to the "start_at" field in this mutation.
func (m *CouponSpecialOfferMutation) AddedStartAt() (r int32, exists bool) {
	v := m.addstart_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearStartAt clears the value of the "start_at" field.
func (m *CouponSpecialOfferMutation) ClearStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	m.clearedFields[couponspecialoffer.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *CouponSpecialOfferMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[couponspecialoffer.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *CouponSpecialOfferMutation) ResetStartAt() {
	m.start_at = nil
	m.addstart_at = nil
	delete(m.clearedFields, couponspecialoffer.FieldStartAt)
}

// SetDurationDays sets the "duration_days" field.
func (m *CouponSpecialOfferMutation) SetDurationDays(u uint32) {
	m.duration_days = &u
	m.addduration_days = nil
}

// DurationDays returns the value of the "duration_days" field in the mutation.
func (m *CouponSpecialOfferMutation) DurationDays() (r uint32, exists bool) {
	v := m.duration_days
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationDays returns the old "duration_days" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldDurationDays(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationDays: %w", err)
	}
	return oldValue.DurationDays, nil
}

// AddDurationDays adds u to the "duration_days" field.
func (m *CouponSpecialOfferMutation) AddDurationDays(u int32) {
	if m.addduration_days != nil {
		*m.addduration_days += u
	} else {
		m.addduration_days = &u
	}
}

// AddedDurationDays returns the value that was added to the "duration_days" field in this mutation.
func (m *CouponSpecialOfferMutation) AddedDurationDays() (r int32, exists bool) {
	v := m.addduration_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearDurationDays clears the value of the "duration_days" field.
func (m *CouponSpecialOfferMutation) ClearDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	m.clearedFields[couponspecialoffer.FieldDurationDays] = struct{}{}
}

// DurationDaysCleared returns if the "duration_days" field was cleared in this mutation.
func (m *CouponSpecialOfferMutation) DurationDaysCleared() bool {
	_, ok := m.clearedFields[couponspecialoffer.FieldDurationDays]
	return ok
}

// ResetDurationDays resets all changes to the "duration_days" field.
func (m *CouponSpecialOfferMutation) ResetDurationDays() {
	m.duration_days = nil
	m.addduration_days = nil
	delete(m.clearedFields, couponspecialoffer.FieldDurationDays)
}

// SetMessage sets the "message" field.
func (m *CouponSpecialOfferMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CouponSpecialOfferMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CouponSpecialOffer entity.
// If the CouponSpecialOffer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponSpecialOfferMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *CouponSpecialOfferMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[couponspecialoffer.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *CouponSpecialOfferMutation) MessageCleared() bool {
	_, ok := m.clearedFields[couponspecialoffer.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *CouponSpecialOfferMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, couponspecialoffer.FieldMessage)
}

// Where appends a list predicates to the CouponSpecialOfferMutation builder.
func (m *CouponSpecialOfferMutation) Where(ps ...predicate.CouponSpecialOffer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponSpecialOfferMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponSpecialOffer).
func (m *CouponSpecialOfferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponSpecialOfferMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, couponspecialoffer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, couponspecialoffer.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, couponspecialoffer.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, couponspecialoffer.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, couponspecialoffer.FieldUserID)
	}
	if m.amount != nil {
		fields = append(fields, couponspecialoffer.FieldAmount)
	}
	if m.release_by_user_id != nil {
		fields = append(fields, couponspecialoffer.FieldReleaseByUserID)
	}
	if m.start_at != nil {
		fields = append(fields, couponspecialoffer.FieldStartAt)
	}
	if m.duration_days != nil {
		fields = append(fields, couponspecialoffer.FieldDurationDays)
	}
	if m.message != nil {
		fields = append(fields, couponspecialoffer.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponSpecialOfferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		return m.CreatedAt()
	case couponspecialoffer.FieldUpdatedAt:
		return m.UpdatedAt()
	case couponspecialoffer.FieldDeletedAt:
		return m.DeletedAt()
	case couponspecialoffer.FieldAppID:
		return m.AppID()
	case couponspecialoffer.FieldUserID:
		return m.UserID()
	case couponspecialoffer.FieldAmount:
		return m.Amount()
	case couponspecialoffer.FieldReleaseByUserID:
		return m.ReleaseByUserID()
	case couponspecialoffer.FieldStartAt:
		return m.StartAt()
	case couponspecialoffer.FieldDurationDays:
		return m.DurationDays()
	case couponspecialoffer.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponSpecialOfferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case couponspecialoffer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case couponspecialoffer.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case couponspecialoffer.FieldAppID:
		return m.OldAppID(ctx)
	case couponspecialoffer.FieldUserID:
		return m.OldUserID(ctx)
	case couponspecialoffer.FieldAmount:
		return m.OldAmount(ctx)
	case couponspecialoffer.FieldReleaseByUserID:
		return m.OldReleaseByUserID(ctx)
	case couponspecialoffer.FieldStartAt:
		return m.OldStartAt(ctx)
	case couponspecialoffer.FieldDurationDays:
		return m.OldDurationDays(ctx)
	case couponspecialoffer.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown CouponSpecialOffer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponSpecialOfferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case couponspecialoffer.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case couponspecialoffer.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case couponspecialoffer.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case couponspecialoffer.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case couponspecialoffer.FieldAmount:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case couponspecialoffer.FieldReleaseByUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseByUserID(v)
		return nil
	case couponspecialoffer.FieldStartAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case couponspecialoffer.FieldDurationDays:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationDays(v)
		return nil
	case couponspecialoffer.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown CouponSpecialOffer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponSpecialOfferMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, couponspecialoffer.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, couponspecialoffer.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, couponspecialoffer.FieldDeletedAt)
	}
	if m.addstart_at != nil {
		fields = append(fields, couponspecialoffer.FieldStartAt)
	}
	if m.addduration_days != nil {
		fields = append(fields, couponspecialoffer.FieldDurationDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponSpecialOfferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		return m.AddedCreatedAt()
	case couponspecialoffer.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case couponspecialoffer.FieldDeletedAt:
		return m.AddedDeletedAt()
	case couponspecialoffer.FieldStartAt:
		return m.AddedStartAt()
	case couponspecialoffer.FieldDurationDays:
		return m.AddedDurationDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponSpecialOfferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case couponspecialoffer.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case couponspecialoffer.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case couponspecialoffer.FieldStartAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStartAt(v)
		return nil
	case couponspecialoffer.FieldDurationDays:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationDays(v)
		return nil
	}
	return fmt.Errorf("unknown CouponSpecialOffer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponSpecialOfferMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(couponspecialoffer.FieldAmount) {
		fields = append(fields, couponspecialoffer.FieldAmount)
	}
	if m.FieldCleared(couponspecialoffer.FieldStartAt) {
		fields = append(fields, couponspecialoffer.FieldStartAt)
	}
	if m.FieldCleared(couponspecialoffer.FieldDurationDays) {
		fields = append(fields, couponspecialoffer.FieldDurationDays)
	}
	if m.FieldCleared(couponspecialoffer.FieldMessage) {
		fields = append(fields, couponspecialoffer.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponSpecialOfferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponSpecialOfferMutation) ClearField(name string) error {
	switch name {
	case couponspecialoffer.FieldAmount:
		m.ClearAmount()
		return nil
	case couponspecialoffer.FieldStartAt:
		m.ClearStartAt()
		return nil
	case couponspecialoffer.FieldDurationDays:
		m.ClearDurationDays()
		return nil
	case couponspecialoffer.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown CouponSpecialOffer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponSpecialOfferMutation) ResetField(name string) error {
	switch name {
	case couponspecialoffer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case couponspecialoffer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case couponspecialoffer.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case couponspecialoffer.FieldAppID:
		m.ResetAppID()
		return nil
	case couponspecialoffer.FieldUserID:
		m.ResetUserID()
		return nil
	case couponspecialoffer.FieldAmount:
		m.ResetAmount()
		return nil
	case couponspecialoffer.FieldReleaseByUserID:
		m.ResetReleaseByUserID()
		return nil
	case couponspecialoffer.FieldStartAt:
		m.ResetStartAt()
		return nil
	case couponspecialoffer.FieldDurationDays:
		m.ResetDurationDays()
		return nil
	case couponspecialoffer.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown CouponSpecialOffer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponSpecialOfferMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponSpecialOfferMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponSpecialOfferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponSpecialOfferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponSpecialOfferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponSpecialOfferMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponSpecialOfferMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponSpecialOffer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponSpecialOfferMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponSpecialOffer edge %s", name)
}
