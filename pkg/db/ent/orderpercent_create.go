// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/inspire-manager/pkg/db/ent/orderpercent"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// OrderPercentCreate is the builder for creating a OrderPercent entity.
type OrderPercentCreate struct {
	config
	mutation *OrderPercentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrderPercentCreate) SetCreatedAt(u uint32) *OrderPercentCreate {
	opc.mutation.SetCreatedAt(u)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableCreatedAt(u *uint32) *OrderPercentCreate {
	if u != nil {
		opc.SetCreatedAt(*u)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrderPercentCreate) SetUpdatedAt(u uint32) *OrderPercentCreate {
	opc.mutation.SetUpdatedAt(u)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableUpdatedAt(u *uint32) *OrderPercentCreate {
	if u != nil {
		opc.SetUpdatedAt(*u)
	}
	return opc
}

// SetDeletedAt sets the "deleted_at" field.
func (opc *OrderPercentCreate) SetDeletedAt(u uint32) *OrderPercentCreate {
	opc.mutation.SetDeletedAt(u)
	return opc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableDeletedAt(u *uint32) *OrderPercentCreate {
	if u != nil {
		opc.SetDeletedAt(*u)
	}
	return opc
}

// SetAppID sets the "app_id" field.
func (opc *OrderPercentCreate) SetAppID(u uuid.UUID) *OrderPercentCreate {
	opc.mutation.SetAppID(u)
	return opc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableAppID(u *uuid.UUID) *OrderPercentCreate {
	if u != nil {
		opc.SetAppID(*u)
	}
	return opc
}

// SetUserID sets the "user_id" field.
func (opc *OrderPercentCreate) SetUserID(u uuid.UUID) *OrderPercentCreate {
	opc.mutation.SetUserID(u)
	return opc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableUserID(u *uuid.UUID) *OrderPercentCreate {
	if u != nil {
		opc.SetUserID(*u)
	}
	return opc
}

// SetGoodID sets the "good_id" field.
func (opc *OrderPercentCreate) SetGoodID(u uuid.UUID) *OrderPercentCreate {
	opc.mutation.SetGoodID(u)
	return opc
}

// SetNillableGoodID sets the "good_id" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableGoodID(u *uuid.UUID) *OrderPercentCreate {
	if u != nil {
		opc.SetGoodID(*u)
	}
	return opc
}

// SetTitle sets the "title" field.
func (opc *OrderPercentCreate) SetTitle(s string) *OrderPercentCreate {
	opc.mutation.SetTitle(s)
	return opc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableTitle(s *string) *OrderPercentCreate {
	if s != nil {
		opc.SetTitle(*s)
	}
	return opc
}

// SetPercent sets the "percent" field.
func (opc *OrderPercentCreate) SetPercent(d decimal.Decimal) *OrderPercentCreate {
	opc.mutation.SetPercent(d)
	return opc
}

// SetNillablePercent sets the "percent" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillablePercent(d *decimal.Decimal) *OrderPercentCreate {
	if d != nil {
		opc.SetPercent(*d)
	}
	return opc
}

// SetStartAt sets the "start_at" field.
func (opc *OrderPercentCreate) SetStartAt(u uint32) *OrderPercentCreate {
	opc.mutation.SetStartAt(u)
	return opc
}

// SetEndAt sets the "end_at" field.
func (opc *OrderPercentCreate) SetEndAt(u uint32) *OrderPercentCreate {
	opc.mutation.SetEndAt(u)
	return opc
}

// SetBadgeLarge sets the "badge_large" field.
func (opc *OrderPercentCreate) SetBadgeLarge(s string) *OrderPercentCreate {
	opc.mutation.SetBadgeLarge(s)
	return opc
}

// SetBadgeSmall sets the "badge_small" field.
func (opc *OrderPercentCreate) SetBadgeSmall(s string) *OrderPercentCreate {
	opc.mutation.SetBadgeSmall(s)
	return opc
}

// SetID sets the "id" field.
func (opc *OrderPercentCreate) SetID(u uuid.UUID) *OrderPercentCreate {
	opc.mutation.SetID(u)
	return opc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (opc *OrderPercentCreate) SetNillableID(u *uuid.UUID) *OrderPercentCreate {
	if u != nil {
		opc.SetID(*u)
	}
	return opc
}

// Mutation returns the OrderPercentMutation object of the builder.
func (opc *OrderPercentCreate) Mutation() *OrderPercentMutation {
	return opc.mutation
}

// Save creates the OrderPercent in the database.
func (opc *OrderPercentCreate) Save(ctx context.Context) (*OrderPercent, error) {
	var (
		err  error
		node *OrderPercent
	)
	if err := opc.defaults(); err != nil {
		return nil, err
	}
	if len(opc.hooks) == 0 {
		if err = opc.check(); err != nil {
			return nil, err
		}
		node, err = opc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPercentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opc.check(); err != nil {
				return nil, err
			}
			opc.mutation = mutation
			if node, err = opc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(opc.hooks) - 1; i >= 0; i-- {
			if opc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPercent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPercentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrderPercentCreate) SaveX(ctx context.Context) *OrderPercent {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrderPercentCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrderPercentCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrderPercentCreate) defaults() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		if orderpercent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		if orderpercent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultUpdatedAt()
		opc.mutation.SetUpdatedAt(v)
	}
	if _, ok := opc.mutation.DeletedAt(); !ok {
		if orderpercent.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultDeletedAt()
		opc.mutation.SetDeletedAt(v)
	}
	if _, ok := opc.mutation.AppID(); !ok {
		if orderpercent.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultAppID()
		opc.mutation.SetAppID(v)
	}
	if _, ok := opc.mutation.UserID(); !ok {
		if orderpercent.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultUserID()
		opc.mutation.SetUserID(v)
	}
	if _, ok := opc.mutation.GoodID(); !ok {
		if orderpercent.DefaultGoodID == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultGoodID (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultGoodID()
		opc.mutation.SetGoodID(v)
	}
	if _, ok := opc.mutation.Title(); !ok {
		v := orderpercent.DefaultTitle
		opc.mutation.SetTitle(v)
	}
	if _, ok := opc.mutation.Percent(); !ok {
		v := orderpercent.DefaultPercent
		opc.mutation.SetPercent(v)
	}
	if _, ok := opc.mutation.ID(); !ok {
		if orderpercent.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized orderpercent.DefaultID (forgotten import ent/runtime?)")
		}
		v := orderpercent.DefaultID()
		opc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrderPercentCreate) check() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPercent.created_at"`)}
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPercent.updated_at"`)}
	}
	if _, ok := opc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderPercent.deleted_at"`)}
	}
	if _, ok := opc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "OrderPercent.start_at"`)}
	}
	if _, ok := opc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "OrderPercent.end_at"`)}
	}
	if _, ok := opc.mutation.BadgeLarge(); !ok {
		return &ValidationError{Name: "badge_large", err: errors.New(`ent: missing required field "OrderPercent.badge_large"`)}
	}
	if _, ok := opc.mutation.BadgeSmall(); !ok {
		return &ValidationError{Name: "badge_small", err: errors.New(`ent: missing required field "OrderPercent.badge_small"`)}
	}
	return nil
}

func (opc *OrderPercentCreate) sqlSave(ctx context.Context) (*OrderPercent, error) {
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (opc *OrderPercentCreate) createSpec() (*OrderPercent, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPercent{config: opc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpercent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: orderpercent.FieldID,
			},
		}
	)
	_spec.OnConflict = opc.conflict
	if id, ok := opc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := opc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := opc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := opc.mutation.GoodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderpercent.FieldGoodID,
		})
		_node.GoodID = value
	}
	if value, ok := opc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := opc.mutation.Percent(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: orderpercent.FieldPercent,
		})
		_node.Percent = value
	}
	if value, ok := opc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := opc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderpercent.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := opc.mutation.BadgeLarge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeLarge,
		})
		_node.BadgeLarge = value
	}
	if value, ok := opc.mutation.BadgeSmall(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpercent.FieldBadgeSmall,
		})
		_node.BadgeSmall = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPercent.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opc *OrderPercentCreate) OnConflict(opts ...sql.ConflictOption) *OrderPercentUpsertOne {
	opc.conflict = opts
	return &OrderPercentUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opc *OrderPercentCreate) OnConflictColumns(columns ...string) *OrderPercentUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OrderPercentUpsertOne{
		create: opc,
	}
}

type (
	// OrderPercentUpsertOne is the builder for "upsert"-ing
	//  one OrderPercent node.
	OrderPercentUpsertOne struct {
		create *OrderPercentCreate
	}

	// OrderPercentUpsert is the "OnConflict" setter.
	OrderPercentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderPercentUpsert) SetCreatedAt(v uint32) *OrderPercentUpsert {
	u.Set(orderpercent.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateCreatedAt() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPercentUpsert) AddCreatedAt(v uint32) *OrderPercentUpsert {
	u.Add(orderpercent.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPercentUpsert) SetUpdatedAt(v uint32) *OrderPercentUpsert {
	u.Set(orderpercent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateUpdatedAt() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPercentUpsert) AddUpdatedAt(v uint32) *OrderPercentUpsert {
	u.Add(orderpercent.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPercentUpsert) SetDeletedAt(v uint32) *OrderPercentUpsert {
	u.Set(orderpercent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateDeletedAt() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPercentUpsert) AddDeletedAt(v uint32) *OrderPercentUpsert {
	u.Add(orderpercent.FieldDeletedAt, v)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OrderPercentUpsert) SetAppID(v uuid.UUID) *OrderPercentUpsert {
	u.Set(orderpercent.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateAppID() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderPercentUpsert) ClearAppID() *OrderPercentUpsert {
	u.SetNull(orderpercent.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderPercentUpsert) SetUserID(v uuid.UUID) *OrderPercentUpsert {
	u.Set(orderpercent.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateUserID() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderPercentUpsert) ClearUserID() *OrderPercentUpsert {
	u.SetNull(orderpercent.FieldUserID)
	return u
}

// SetGoodID sets the "good_id" field.
func (u *OrderPercentUpsert) SetGoodID(v uuid.UUID) *OrderPercentUpsert {
	u.Set(orderpercent.FieldGoodID, v)
	return u
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateGoodID() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldGoodID)
	return u
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderPercentUpsert) ClearGoodID() *OrderPercentUpsert {
	u.SetNull(orderpercent.FieldGoodID)
	return u
}

// SetTitle sets the "title" field.
func (u *OrderPercentUpsert) SetTitle(v string) *OrderPercentUpsert {
	u.Set(orderpercent.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateTitle() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *OrderPercentUpsert) ClearTitle() *OrderPercentUpsert {
	u.SetNull(orderpercent.FieldTitle)
	return u
}

// SetPercent sets the "percent" field.
func (u *OrderPercentUpsert) SetPercent(v decimal.Decimal) *OrderPercentUpsert {
	u.Set(orderpercent.FieldPercent, v)
	return u
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdatePercent() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldPercent)
	return u
}

// ClearPercent clears the value of the "percent" field.
func (u *OrderPercentUpsert) ClearPercent() *OrderPercentUpsert {
	u.SetNull(orderpercent.FieldPercent)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OrderPercentUpsert) SetStartAt(v uint32) *OrderPercentUpsert {
	u.Set(orderpercent.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateStartAt() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldStartAt)
	return u
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderPercentUpsert) AddStartAt(v uint32) *OrderPercentUpsert {
	u.Add(orderpercent.FieldStartAt, v)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OrderPercentUpsert) SetEndAt(v uint32) *OrderPercentUpsert {
	u.Set(orderpercent.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateEndAt() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldEndAt)
	return u
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderPercentUpsert) AddEndAt(v uint32) *OrderPercentUpsert {
	u.Add(orderpercent.FieldEndAt, v)
	return u
}

// SetBadgeLarge sets the "badge_large" field.
func (u *OrderPercentUpsert) SetBadgeLarge(v string) *OrderPercentUpsert {
	u.Set(orderpercent.FieldBadgeLarge, v)
	return u
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateBadgeLarge() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldBadgeLarge)
	return u
}

// SetBadgeSmall sets the "badge_small" field.
func (u *OrderPercentUpsert) SetBadgeSmall(v string) *OrderPercentUpsert {
	u.Set(orderpercent.FieldBadgeSmall, v)
	return u
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *OrderPercentUpsert) UpdateBadgeSmall() *OrderPercentUpsert {
	u.SetExcluded(orderpercent.FieldBadgeSmall)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderPercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPercentUpsertOne) UpdateNewValues() *OrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderpercent.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderPercent.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderPercentUpsertOne) Ignore() *OrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPercentUpsertOne) DoNothing() *OrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPercentCreate.OnConflict
// documentation for more info.
func (u *OrderPercentUpsertOne) Update(set func(*OrderPercentUpsert)) *OrderPercentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPercentUpsertOne) SetCreatedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPercentUpsertOne) AddCreatedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateCreatedAt() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPercentUpsertOne) SetUpdatedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPercentUpsertOne) AddUpdatedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateUpdatedAt() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPercentUpsertOne) SetDeletedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPercentUpsertOne) AddDeletedAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateDeletedAt() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderPercentUpsertOne) SetAppID(v uuid.UUID) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateAppID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderPercentUpsertOne) ClearAppID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderPercentUpsertOne) SetUserID(v uuid.UUID) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateUserID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderPercentUpsertOne) ClearUserID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderPercentUpsertOne) SetGoodID(v uuid.UUID) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateGoodID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderPercentUpsertOne) ClearGoodID() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearGoodID()
	})
}

// SetTitle sets the "title" field.
func (u *OrderPercentUpsertOne) SetTitle(v string) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateTitle() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *OrderPercentUpsertOne) ClearTitle() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearTitle()
	})
}

// SetPercent sets the "percent" field.
func (u *OrderPercentUpsertOne) SetPercent(v decimal.Decimal) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdatePercent() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *OrderPercentUpsertOne) ClearPercent() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderPercentUpsertOne) SetStartAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderPercentUpsertOne) AddStartAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateStartAt() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderPercentUpsertOne) SetEndAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderPercentUpsertOne) AddEndAt(v uint32) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateEndAt() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateEndAt()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *OrderPercentUpsertOne) SetBadgeLarge(v string) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateBadgeLarge() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *OrderPercentUpsertOne) SetBadgeSmall(v string) *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *OrderPercentUpsertOne) UpdateBadgeSmall() *OrderPercentUpsertOne {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateBadgeSmall()
	})
}

// Exec executes the query.
func (u *OrderPercentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPercentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPercentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPercentUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrderPercentUpsertOne.ID is not supported by MySQL driver. Use OrderPercentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPercentUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPercentCreateBulk is the builder for creating many OrderPercent entities in bulk.
type OrderPercentCreateBulk struct {
	config
	builders []*OrderPercentCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPercent entities in the database.
func (opcb *OrderPercentCreateBulk) Save(ctx context.Context) ([]*OrderPercent, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrderPercent, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPercentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrderPercentCreateBulk) SaveX(ctx context.Context) []*OrderPercent {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrderPercentCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrderPercentCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPercent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPercentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opcb *OrderPercentCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPercentUpsertBulk {
	opcb.conflict = opts
	return &OrderPercentUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPercent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opcb *OrderPercentCreateBulk) OnConflictColumns(columns ...string) *OrderPercentUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OrderPercentUpsertBulk{
		create: opcb,
	}
}

// OrderPercentUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPercent nodes.
type OrderPercentUpsertBulk struct {
	create *OrderPercentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPercent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderpercent.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderPercentUpsertBulk) UpdateNewValues() *OrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderpercent.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPercent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderPercentUpsertBulk) Ignore() *OrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPercentUpsertBulk) DoNothing() *OrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPercentCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPercentUpsertBulk) Update(set func(*OrderPercentUpsert)) *OrderPercentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPercentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPercentUpsertBulk) SetCreatedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderPercentUpsertBulk) AddCreatedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateCreatedAt() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPercentUpsertBulk) SetUpdatedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderPercentUpsertBulk) AddUpdatedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateUpdatedAt() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPercentUpsertBulk) SetDeletedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderPercentUpsertBulk) AddDeletedAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateDeletedAt() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *OrderPercentUpsertBulk) SetAppID(v uuid.UUID) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateAppID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OrderPercentUpsertBulk) ClearAppID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderPercentUpsertBulk) SetUserID(v uuid.UUID) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateUserID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *OrderPercentUpsertBulk) ClearUserID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearUserID()
	})
}

// SetGoodID sets the "good_id" field.
func (u *OrderPercentUpsertBulk) SetGoodID(v uuid.UUID) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetGoodID(v)
	})
}

// UpdateGoodID sets the "good_id" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateGoodID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateGoodID()
	})
}

// ClearGoodID clears the value of the "good_id" field.
func (u *OrderPercentUpsertBulk) ClearGoodID() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearGoodID()
	})
}

// SetTitle sets the "title" field.
func (u *OrderPercentUpsertBulk) SetTitle(v string) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateTitle() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *OrderPercentUpsertBulk) ClearTitle() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearTitle()
	})
}

// SetPercent sets the "percent" field.
func (u *OrderPercentUpsertBulk) SetPercent(v decimal.Decimal) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetPercent(v)
	})
}

// UpdatePercent sets the "percent" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdatePercent() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdatePercent()
	})
}

// ClearPercent clears the value of the "percent" field.
func (u *OrderPercentUpsertBulk) ClearPercent() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.ClearPercent()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderPercentUpsertBulk) SetStartAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetStartAt(v)
	})
}

// AddStartAt adds v to the "start_at" field.
func (u *OrderPercentUpsertBulk) AddStartAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateStartAt() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderPercentUpsertBulk) SetEndAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetEndAt(v)
	})
}

// AddEndAt adds v to the "end_at" field.
func (u *OrderPercentUpsertBulk) AddEndAt(v uint32) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.AddEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateEndAt() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateEndAt()
	})
}

// SetBadgeLarge sets the "badge_large" field.
func (u *OrderPercentUpsertBulk) SetBadgeLarge(v string) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetBadgeLarge(v)
	})
}

// UpdateBadgeLarge sets the "badge_large" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateBadgeLarge() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateBadgeLarge()
	})
}

// SetBadgeSmall sets the "badge_small" field.
func (u *OrderPercentUpsertBulk) SetBadgeSmall(v string) *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.SetBadgeSmall(v)
	})
}

// UpdateBadgeSmall sets the "badge_small" field to the value that was provided on create.
func (u *OrderPercentUpsertBulk) UpdateBadgeSmall() *OrderPercentUpsertBulk {
	return u.Update(func(s *OrderPercentUpsert) {
		s.UpdateBadgeSmall()
	})
}

// Exec executes the query.
func (u *OrderPercentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPercentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPercentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPercentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
